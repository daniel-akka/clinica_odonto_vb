'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3082
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DataSet1"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DataSet1
    Inherits Global.System.Data.DataSet
    
    Private tableest0001 As est0001DataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("est0001")) Is Nothing) Then
                MyBase.Tables.Add(New est0001DataTable(ds.Tables("est0001")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property est0001() As est0001DataTable
        Get
            Return Me.tableest0001
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DataSet1 = CType(MyBase.Clone,DataSet1)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("est0001")) Is Nothing) Then
                MyBase.Tables.Add(New est0001DataTable(ds.Tables("est0001")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableest0001 = CType(MyBase.Tables("est0001"),est0001DataTable)
        If (initTable = true) Then
            If (Not (Me.tableest0001) Is Nothing) Then
                Me.tableest0001.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DataSet1"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DataSet1.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableest0001 = New est0001DataTable
        MyBase.Tables.Add(Me.tableest0001)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeest0001() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DataSet1 = New DataSet1
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub est0001RowChangeEventHandler(ByVal sender As Object, ByVal e As est0001RowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class est0001DataTable
        Inherits Global.System.Data.TypedTableBase(Of est0001Row)
        
        Private columne_codig As Global.System.Data.DataColumn
        
        Private columne_produt As Global.System.Data.DataColumn
        
        Private columne_cdport As Global.System.Data.DataColumn
        
        Private columne_und As Global.System.Data.DataColumn
        
        Private columne_clf As Global.System.Data.DataColumn
        
        Private columne_cst As Global.System.Data.DataColumn
        
        Private columne_cfv As Global.System.Data.DataColumn
        
        Private columne_linha As Global.System.Data.DataColumn
        
        Private columne_grupo As Global.System.Data.DataColumn
        
        Private columne_locacao As Global.System.Data.DataColumn
        
        Private columne_codsubs As Global.System.Data.DataColumn
        
        Private columne_estmin As Global.System.Data.DataColumn
        
        Private columne_comer As Global.System.Data.DataColumn
        
        Private columne_qtde As Global.System.Data.DataColumn
        
        Private columne_pcusto As Global.System.Data.DataColumn
        
        Private columne_pvenda As Global.System.Data.DataColumn
        
        Private columne_com1 As Global.System.Data.DataColumn
        
        Private columne_com2 As Global.System.Data.DataColumn
        
        Private columne_peso As Global.System.Data.DataColumn
        
        Private columne_prom As Global.System.Data.DataColumn
        
        Private columne_reduz As Global.System.Data.DataColumn
        
        Private columne_vprom As Global.System.Data.DataColumn
        
        Private columne_qtdfisc As Global.System.Data.DataColumn
        
        Private columne_inventa As Global.System.Data.DataColumn
        
        Private columne_pcustom As Global.System.Data.DataColumn
        
        Private columne_pcustoa As Global.System.Data.DataColumn
        
        Private columne_prepo As Global.System.Data.DataColumn
        
        Private columne_pcomp As Global.System.Data.DataColumn
        
        Private columne_dtcomp As Global.System.Data.DataColumn
        
        Private columne_dtvend As Global.System.Data.DataColumn
        
        Private columne_pvend15 As Global.System.Data.DataColumn
        
        Private columne_pvend30 As Global.System.Data.DataColumn
        
        Private columne_agreg1 As Global.System.Data.DataColumn
        
        Private columne_agreg2 As Global.System.Data.DataColumn
        
        Private columne_deposito As Global.System.Data.DataColumn
        
        Private columne_empcre As Global.System.Data.DataColumn
        
        Private columne_empdeb As Global.System.Data.DataColumn
        
        Private columne_promi As Global.System.Data.DataColumn
        
        Private columne_valid As Global.System.Data.DataColumn
        
        Private columne_status As Global.System.Data.DataColumn
        
        Private columne_fixo As Global.System.Data.DataColumn
        
        Private columne_ptran As Global.System.Data.DataColumn
        
        Private columne_ipi As Global.System.Data.DataColumn
        
        Private columne_letra As Global.System.Data.DataColumn
        
        Private columne_icmsub As Global.System.Data.DataColumn
        
        Private columne_pis As Global.System.Data.DataColumn
        
        Private columne_icms As Global.System.Data.DataColumn
        
        Private columne_filial1 As Global.System.Data.DataColumn
        
        Private columne_filial2 As Global.System.Data.DataColumn
        
        Private columne_bonif As Global.System.Data.DataColumn
        
        Private columne_ncm As Global.System.Data.DataColumn
        
        Private columne_produt2 As Global.System.Data.DataColumn
        
        Private columne_pcstent As Global.System.Data.DataColumn
        
        Private columne_pcstsai As Global.System.Data.DataColumn
        
        Private columne_ccstent As Global.System.Data.DataColumn
        
        Private columne_ccstsai As Global.System.Data.DataColumn
        
        Private columne_pbcalc As Global.System.Data.DataColumn
        
        Private columne_cdforte As Global.System.Data.DataColumn
        
        Private columne_fortcof As Global.System.Data.DataColumn
        
        Private columne_cdbarra As Global.System.Data.DataColumn
        
        Private columne_embalag As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "est0001"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_codigColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_codig
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_produtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_produt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_cdportColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_cdport
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_undColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_und
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_clfColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_clf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_cstColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_cst
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_cfvColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_cfv
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_linhaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_linha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_grupoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_grupo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_locacaoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_locacao
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_codsubsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_codsubs
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_estminColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_estmin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_comerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_comer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_qtdeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_qtde
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_pcustoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_pcusto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_pvendaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_pvenda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_com1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columne_com1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_com2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columne_com2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_pesoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_peso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_promColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_prom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_reduzColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_reduz
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_vpromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_vprom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_qtdfiscColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_qtdfisc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_inventaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_inventa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_pcustomColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_pcustom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_pcustoaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_pcustoa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_prepoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_prepo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_pcompColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_pcomp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_dtcompColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_dtcomp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_dtvendColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_dtvend
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_pvend15Column() As Global.System.Data.DataColumn
            Get
                Return Me.columne_pvend15
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_pvend30Column() As Global.System.Data.DataColumn
            Get
                Return Me.columne_pvend30
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_agreg1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columne_agreg1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_agreg2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columne_agreg2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_depositoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_deposito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_empcreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_empcre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_empdebColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_empdeb
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_promiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_promi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_validColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_valid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_statusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_status
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_fixoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_fixo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_ptranColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_ptran
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_ipiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_ipi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_letraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_letra
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_icmsubColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_icmsub
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_pisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_pis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_icmsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_icms
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_filial1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columne_filial1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_filial2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columne_filial2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_bonifColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_bonif
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_ncmColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_ncm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_produt2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columne_produt2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_pcstentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_pcstent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_pcstsaiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_pcstsai
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_ccstentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_ccstent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_ccstsaiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_ccstsai
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_pbcalcColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_pbcalc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_cdforteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_cdforte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_fortcofColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_fortcof
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_cdbarraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_cdbarra
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property e_embalagColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne_embalag
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As est0001Row
            Get
                Return CType(Me.Rows(index),est0001Row)
            End Get
        End Property
        
        Public Event est0001RowChanging As est0001RowChangeEventHandler
        
        Public Event est0001RowChanged As est0001RowChangeEventHandler
        
        Public Event est0001RowDeleting As est0001RowChangeEventHandler
        
        Public Event est0001RowDeleted As est0001RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addest0001Row(ByVal row As est0001Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addest0001Row( _
                    ByVal e_codig As String,  _
                    ByVal e_produt As String,  _
                    ByVal e_cdport As String,  _
                    ByVal e_und As String,  _
                    ByVal e_clf As String,  _
                    ByVal e_cst As Decimal,  _
                    ByVal e_cfv As Decimal,  _
                    ByVal e_linha As Decimal,  _
                    ByVal e_grupo As Decimal,  _
                    ByVal e_locacao As String,  _
                    ByVal e_codsubs As String,  _
                    ByVal e_estmin As Decimal,  _
                    ByVal e_comer As String,  _
                    ByVal e_qtde As Decimal,  _
                    ByVal e_pcusto As Decimal,  _
                    ByVal e_pvenda As Decimal,  _
                    ByVal e_com1 As Decimal,  _
                    ByVal e_com2 As Decimal,  _
                    ByVal e_peso As Decimal,  _
                    ByVal e_prom As String,  _
                    ByVal e_reduz As Decimal,  _
                    ByVal e_vprom As Decimal,  _
                    ByVal e_qtdfisc As Decimal,  _
                    ByVal e_inventa As Decimal,  _
                    ByVal e_pcustom As Decimal,  _
                    ByVal e_pcustoa As Decimal,  _
                    ByVal e_prepo As Decimal,  _
                    ByVal e_pcomp As Decimal,  _
                    ByVal e_dtcomp As Date,  _
                    ByVal e_dtvend As Date,  _
                    ByVal e_pvend15 As Decimal,  _
                    ByVal e_pvend30 As Decimal,  _
                    ByVal e_agreg1 As Decimal,  _
                    ByVal e_agreg2 As Decimal,  _
                    ByVal e_deposito As Decimal,  _
                    ByVal e_empcre As Decimal,  _
                    ByVal e_empdeb As Decimal,  _
                    ByVal e_promi As String,  _
                    ByVal e_valid As Date,  _
                    ByVal e_status As String,  _
                    ByVal e_fixo As String,  _
                    ByVal e_ptran As Decimal,  _
                    ByVal e_ipi As Decimal,  _
                    ByVal e_letra As String,  _
                    ByVal e_icmsub As Decimal,  _
                    ByVal e_pis As Decimal,  _
                    ByVal e_icms As Decimal,  _
                    ByVal e_filial1 As Decimal,  _
                    ByVal e_filial2 As Decimal,  _
                    ByVal e_bonif As Decimal,  _
                    ByVal e_ncm As String,  _
                    ByVal e_produt2 As String,  _
                    ByVal e_pcstent As String,  _
                    ByVal e_pcstsai As String,  _
                    ByVal e_ccstent As String,  _
                    ByVal e_ccstsai As String,  _
                    ByVal e_pbcalc As String,  _
                    ByVal e_cdforte As String,  _
                    ByVal e_fortcof As String,  _
                    ByVal e_cdbarra As String,  _
                    ByVal e_embalag As String) As est0001Row
            Dim rowest0001Row As est0001Row = CType(Me.NewRow,est0001Row)
            Dim columnValuesArray() As Object = New Object() {e_codig, e_produt, e_cdport, e_und, e_clf, e_cst, e_cfv, e_linha, e_grupo, e_locacao, e_codsubs, e_estmin, e_comer, e_qtde, e_pcusto, e_pvenda, e_com1, e_com2, e_peso, e_prom, e_reduz, e_vprom, e_qtdfisc, e_inventa, e_pcustom, e_pcustoa, e_prepo, e_pcomp, e_dtcomp, e_dtvend, e_pvend15, e_pvend30, e_agreg1, e_agreg2, e_deposito, e_empcre, e_empdeb, e_promi, e_valid, e_status, e_fixo, e_ptran, e_ipi, e_letra, e_icmsub, e_pis, e_icms, e_filial1, e_filial2, e_bonif, e_ncm, e_produt2, e_pcstent, e_pcstsai, e_ccstent, e_ccstsai, e_pbcalc, e_cdforte, e_fortcof, e_cdbarra, e_embalag}
            rowest0001Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowest0001Row)
            Return rowest0001Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As est0001DataTable = CType(MyBase.Clone,est0001DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New est0001DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columne_codig = MyBase.Columns("e_codig")
            Me.columne_produt = MyBase.Columns("e_produt")
            Me.columne_cdport = MyBase.Columns("e_cdport")
            Me.columne_und = MyBase.Columns("e_und")
            Me.columne_clf = MyBase.Columns("e_clf")
            Me.columne_cst = MyBase.Columns("e_cst")
            Me.columne_cfv = MyBase.Columns("e_cfv")
            Me.columne_linha = MyBase.Columns("e_linha")
            Me.columne_grupo = MyBase.Columns("e_grupo")
            Me.columne_locacao = MyBase.Columns("e_locacao")
            Me.columne_codsubs = MyBase.Columns("e_codsubs")
            Me.columne_estmin = MyBase.Columns("e_estmin")
            Me.columne_comer = MyBase.Columns("e_comer")
            Me.columne_qtde = MyBase.Columns("e_qtde")
            Me.columne_pcusto = MyBase.Columns("e_pcusto")
            Me.columne_pvenda = MyBase.Columns("e_pvenda")
            Me.columne_com1 = MyBase.Columns("e_com1")
            Me.columne_com2 = MyBase.Columns("e_com2")
            Me.columne_peso = MyBase.Columns("e_peso")
            Me.columne_prom = MyBase.Columns("e_prom")
            Me.columne_reduz = MyBase.Columns("e_reduz")
            Me.columne_vprom = MyBase.Columns("e_vprom")
            Me.columne_qtdfisc = MyBase.Columns("e_qtdfisc")
            Me.columne_inventa = MyBase.Columns("e_inventa")
            Me.columne_pcustom = MyBase.Columns("e_pcustom")
            Me.columne_pcustoa = MyBase.Columns("e_pcustoa")
            Me.columne_prepo = MyBase.Columns("e_prepo")
            Me.columne_pcomp = MyBase.Columns("e_pcomp")
            Me.columne_dtcomp = MyBase.Columns("e_dtcomp")
            Me.columne_dtvend = MyBase.Columns("e_dtvend")
            Me.columne_pvend15 = MyBase.Columns("e_pvend15")
            Me.columne_pvend30 = MyBase.Columns("e_pvend30")
            Me.columne_agreg1 = MyBase.Columns("e_agreg1")
            Me.columne_agreg2 = MyBase.Columns("e_agreg2")
            Me.columne_deposito = MyBase.Columns("e_deposito")
            Me.columne_empcre = MyBase.Columns("e_empcre")
            Me.columne_empdeb = MyBase.Columns("e_empdeb")
            Me.columne_promi = MyBase.Columns("e_promi")
            Me.columne_valid = MyBase.Columns("e_valid")
            Me.columne_status = MyBase.Columns("e_status")
            Me.columne_fixo = MyBase.Columns("e_fixo")
            Me.columne_ptran = MyBase.Columns("e_ptran")
            Me.columne_ipi = MyBase.Columns("e_ipi")
            Me.columne_letra = MyBase.Columns("e_letra")
            Me.columne_icmsub = MyBase.Columns("e_icmsub")
            Me.columne_pis = MyBase.Columns("e_pis")
            Me.columne_icms = MyBase.Columns("e_icms")
            Me.columne_filial1 = MyBase.Columns("e_filial1")
            Me.columne_filial2 = MyBase.Columns("e_filial2")
            Me.columne_bonif = MyBase.Columns("e_bonif")
            Me.columne_ncm = MyBase.Columns("e_ncm")
            Me.columne_produt2 = MyBase.Columns("e_produt2")
            Me.columne_pcstent = MyBase.Columns("e_pcstent")
            Me.columne_pcstsai = MyBase.Columns("e_pcstsai")
            Me.columne_ccstent = MyBase.Columns("e_ccstent")
            Me.columne_ccstsai = MyBase.Columns("e_ccstsai")
            Me.columne_pbcalc = MyBase.Columns("e_pbcalc")
            Me.columne_cdforte = MyBase.Columns("e_cdforte")
            Me.columne_fortcof = MyBase.Columns("e_fortcof")
            Me.columne_cdbarra = MyBase.Columns("e_cdbarra")
            Me.columne_embalag = MyBase.Columns("e_embalag")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columne_codig = New Global.System.Data.DataColumn("e_codig", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_codig)
            Me.columne_produt = New Global.System.Data.DataColumn("e_produt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_produt)
            Me.columne_cdport = New Global.System.Data.DataColumn("e_cdport", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_cdport)
            Me.columne_und = New Global.System.Data.DataColumn("e_und", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_und)
            Me.columne_clf = New Global.System.Data.DataColumn("e_clf", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_clf)
            Me.columne_cst = New Global.System.Data.DataColumn("e_cst", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_cst)
            Me.columne_cfv = New Global.System.Data.DataColumn("e_cfv", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_cfv)
            Me.columne_linha = New Global.System.Data.DataColumn("e_linha", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_linha)
            Me.columne_grupo = New Global.System.Data.DataColumn("e_grupo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_grupo)
            Me.columne_locacao = New Global.System.Data.DataColumn("e_locacao", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_locacao)
            Me.columne_codsubs = New Global.System.Data.DataColumn("e_codsubs", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_codsubs)
            Me.columne_estmin = New Global.System.Data.DataColumn("e_estmin", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_estmin)
            Me.columne_comer = New Global.System.Data.DataColumn("e_comer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_comer)
            Me.columne_qtde = New Global.System.Data.DataColumn("e_qtde", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_qtde)
            Me.columne_pcusto = New Global.System.Data.DataColumn("e_pcusto", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_pcusto)
            Me.columne_pvenda = New Global.System.Data.DataColumn("e_pvenda", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_pvenda)
            Me.columne_com1 = New Global.System.Data.DataColumn("e_com1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_com1)
            Me.columne_com2 = New Global.System.Data.DataColumn("e_com2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_com2)
            Me.columne_peso = New Global.System.Data.DataColumn("e_peso", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_peso)
            Me.columne_prom = New Global.System.Data.DataColumn("e_prom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_prom)
            Me.columne_reduz = New Global.System.Data.DataColumn("e_reduz", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_reduz)
            Me.columne_vprom = New Global.System.Data.DataColumn("e_vprom", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_vprom)
            Me.columne_qtdfisc = New Global.System.Data.DataColumn("e_qtdfisc", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_qtdfisc)
            Me.columne_inventa = New Global.System.Data.DataColumn("e_inventa", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_inventa)
            Me.columne_pcustom = New Global.System.Data.DataColumn("e_pcustom", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_pcustom)
            Me.columne_pcustoa = New Global.System.Data.DataColumn("e_pcustoa", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_pcustoa)
            Me.columne_prepo = New Global.System.Data.DataColumn("e_prepo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_prepo)
            Me.columne_pcomp = New Global.System.Data.DataColumn("e_pcomp", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_pcomp)
            Me.columne_dtcomp = New Global.System.Data.DataColumn("e_dtcomp", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_dtcomp)
            Me.columne_dtvend = New Global.System.Data.DataColumn("e_dtvend", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_dtvend)
            Me.columne_pvend15 = New Global.System.Data.DataColumn("e_pvend15", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_pvend15)
            Me.columne_pvend30 = New Global.System.Data.DataColumn("e_pvend30", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_pvend30)
            Me.columne_agreg1 = New Global.System.Data.DataColumn("e_agreg1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_agreg1)
            Me.columne_agreg2 = New Global.System.Data.DataColumn("e_agreg2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_agreg2)
            Me.columne_deposito = New Global.System.Data.DataColumn("e_deposito", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_deposito)
            Me.columne_empcre = New Global.System.Data.DataColumn("e_empcre", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_empcre)
            Me.columne_empdeb = New Global.System.Data.DataColumn("e_empdeb", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_empdeb)
            Me.columne_promi = New Global.System.Data.DataColumn("e_promi", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_promi)
            Me.columne_valid = New Global.System.Data.DataColumn("e_valid", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_valid)
            Me.columne_status = New Global.System.Data.DataColumn("e_status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_status)
            Me.columne_fixo = New Global.System.Data.DataColumn("e_fixo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_fixo)
            Me.columne_ptran = New Global.System.Data.DataColumn("e_ptran", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_ptran)
            Me.columne_ipi = New Global.System.Data.DataColumn("e_ipi", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_ipi)
            Me.columne_letra = New Global.System.Data.DataColumn("e_letra", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_letra)
            Me.columne_icmsub = New Global.System.Data.DataColumn("e_icmsub", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_icmsub)
            Me.columne_pis = New Global.System.Data.DataColumn("e_pis", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_pis)
            Me.columne_icms = New Global.System.Data.DataColumn("e_icms", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_icms)
            Me.columne_filial1 = New Global.System.Data.DataColumn("e_filial1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_filial1)
            Me.columne_filial2 = New Global.System.Data.DataColumn("e_filial2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_filial2)
            Me.columne_bonif = New Global.System.Data.DataColumn("e_bonif", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_bonif)
            Me.columne_ncm = New Global.System.Data.DataColumn("e_ncm", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_ncm)
            Me.columne_produt2 = New Global.System.Data.DataColumn("e_produt2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_produt2)
            Me.columne_pcstent = New Global.System.Data.DataColumn("e_pcstent", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_pcstent)
            Me.columne_pcstsai = New Global.System.Data.DataColumn("e_pcstsai", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_pcstsai)
            Me.columne_ccstent = New Global.System.Data.DataColumn("e_ccstent", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_ccstent)
            Me.columne_ccstsai = New Global.System.Data.DataColumn("e_ccstsai", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_ccstsai)
            Me.columne_pbcalc = New Global.System.Data.DataColumn("e_pbcalc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_pbcalc)
            Me.columne_cdforte = New Global.System.Data.DataColumn("e_cdforte", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_cdforte)
            Me.columne_fortcof = New Global.System.Data.DataColumn("e_fortcof", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_fortcof)
            Me.columne_cdbarra = New Global.System.Data.DataColumn("e_cdbarra", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_cdbarra)
            Me.columne_embalag = New Global.System.Data.DataColumn("e_embalag", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne_embalag)
            Me.columne_codig.MaxLength = 5
            Me.columne_produt.MaxLength = 48
            Me.columne_cdport.MaxLength = 6
            Me.columne_und.MaxLength = 3
            Me.columne_clf.MaxLength = 2
            Me.columne_locacao.MaxLength = 9
            Me.columne_codsubs.MaxLength = 6
            Me.columne_comer.MaxLength = 1
            Me.columne_prom.MaxLength = 1
            Me.columne_promi.MaxLength = 1
            Me.columne_status.MaxLength = 1
            Me.columne_fixo.MaxLength = 1
            Me.columne_letra.MaxLength = 1
            Me.columne_ncm.MaxLength = 8
            Me.columne_produt2.MaxLength = 71
            Me.columne_pcstent.MaxLength = 2
            Me.columne_pcstsai.MaxLength = 2
            Me.columne_ccstent.MaxLength = 2
            Me.columne_ccstsai.MaxLength = 2
            Me.columne_pbcalc.MaxLength = 1
            Me.columne_cdforte.MaxLength = 3
            Me.columne_fortcof.MaxLength = 3
            Me.columne_cdbarra.MaxLength = 14
            Me.columne_embalag.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newest0001Row() As est0001Row
            Return CType(Me.NewRow,est0001Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New est0001Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(est0001Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.est0001RowChangedEvent) Is Nothing) Then
                RaiseEvent est0001RowChanged(Me, New est0001RowChangeEvent(CType(e.Row,est0001Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.est0001RowChangingEvent) Is Nothing) Then
                RaiseEvent est0001RowChanging(Me, New est0001RowChangeEvent(CType(e.Row,est0001Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.est0001RowDeletedEvent) Is Nothing) Then
                RaiseEvent est0001RowDeleted(Me, New est0001RowChangeEvent(CType(e.Row,est0001Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.est0001RowDeletingEvent) Is Nothing) Then
                RaiseEvent est0001RowDeleting(Me, New est0001RowChangeEvent(CType(e.Row,est0001Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removeest0001Row(ByVal row As est0001Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet1 = New DataSet1
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "est0001DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class est0001Row
        Inherits Global.System.Data.DataRow
        
        Private tableest0001 As est0001DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableest0001 = CType(Me.Table,est0001DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_codig() As String
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_codigColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_codig' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_codigColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_produt() As String
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_produtColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_produt' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_produtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_cdport() As String
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_cdportColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_cdport' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_cdportColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_und() As String
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_undColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_und' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_undColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_clf() As String
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_clfColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_clf' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_clfColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_cst() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_cstColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_cst' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_cstColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_cfv() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_cfvColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_cfv' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_cfvColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_linha() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_linhaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_linha' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_linhaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_grupo() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_grupoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_grupo' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_grupoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_locacao() As String
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_locacaoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_locacao' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_locacaoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_codsubs() As String
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_codsubsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_codsubs' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_codsubsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_estmin() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_estminColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_estmin' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_estminColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_comer() As String
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_comerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_comer' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_comerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_qtde() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_qtdeColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_qtde' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_qtdeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_pcusto() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_pcustoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_pcusto' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_pcustoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_pvenda() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_pvendaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_pvenda' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_pvendaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_com1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_com1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_com1' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_com1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_com2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_com2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_com2' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_com2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_peso() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_pesoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_peso' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_pesoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_prom() As String
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_promColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_prom' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_promColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_reduz() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_reduzColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_reduz' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_reduzColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_vprom() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_vpromColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_vprom' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_vpromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_qtdfisc() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_qtdfiscColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_qtdfisc' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_qtdfiscColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_inventa() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_inventaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_inventa' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_inventaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_pcustom() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_pcustomColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_pcustom' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_pcustomColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_pcustoa() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_pcustoaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_pcustoa' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_pcustoaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_prepo() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_prepoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_prepo' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_prepoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_pcomp() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_pcompColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_pcomp' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_pcompColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_dtcomp() As Date
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_dtcompColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_dtcomp' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_dtcompColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_dtvend() As Date
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_dtvendColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_dtvend' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_dtvendColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_pvend15() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_pvend15Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_pvend15' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_pvend15Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_pvend30() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_pvend30Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_pvend30' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_pvend30Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_agreg1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_agreg1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_agreg1' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_agreg1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_agreg2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_agreg2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_agreg2' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_agreg2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_deposito() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_depositoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_deposito' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_depositoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_empcre() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_empcreColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_empcre' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_empcreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_empdeb() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_empdebColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_empdeb' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_empdebColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_promi() As String
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_promiColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_promi' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_promiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_valid() As Date
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_validColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_valid' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_validColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_status() As String
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_statusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_status' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_statusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_fixo() As String
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_fixoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_fixo' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_fixoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_ptran() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_ptranColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_ptran' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_ptranColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_ipi() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_ipiColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_ipi' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_ipiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_letra() As String
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_letraColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_letra' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_letraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_icmsub() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_icmsubColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_icmsub' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_icmsubColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_pis() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_pisColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_pis' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_pisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_icms() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_icmsColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_icms' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_icmsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_filial1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_filial1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_filial1' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_filial1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_filial2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_filial2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_filial2' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_filial2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_bonif() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_bonifColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_bonif' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_bonifColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_ncm() As String
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_ncmColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_ncm' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_ncmColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_produt2() As String
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_produt2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_produt2' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_produt2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_pcstent() As String
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_pcstentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_pcstent' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_pcstentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_pcstsai() As String
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_pcstsaiColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_pcstsai' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_pcstsaiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_ccstent() As String
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_ccstentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_ccstent' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_ccstentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_ccstsai() As String
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_ccstsaiColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_ccstsai' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_ccstsaiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_pbcalc() As String
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_pbcalcColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_pbcalc' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_pbcalcColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_cdforte() As String
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_cdforteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_cdforte' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_cdforteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_fortcof() As String
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_fortcofColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_fortcof' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_fortcofColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_cdbarra() As String
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_cdbarraColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_cdbarra' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_cdbarraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property e_embalag() As String
            Get
                Try 
                    Return CType(Me(Me.tableest0001.e_embalagColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e_embalag' in table 'est0001' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableest0001.e_embalagColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_codigNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_codigColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_codigNull()
            Me(Me.tableest0001.e_codigColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_produtNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_produtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_produtNull()
            Me(Me.tableest0001.e_produtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_cdportNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_cdportColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_cdportNull()
            Me(Me.tableest0001.e_cdportColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_undNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_undColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_undNull()
            Me(Me.tableest0001.e_undColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_clfNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_clfColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_clfNull()
            Me(Me.tableest0001.e_clfColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_cstNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_cstColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_cstNull()
            Me(Me.tableest0001.e_cstColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_cfvNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_cfvColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_cfvNull()
            Me(Me.tableest0001.e_cfvColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_linhaNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_linhaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_linhaNull()
            Me(Me.tableest0001.e_linhaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_grupoNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_grupoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_grupoNull()
            Me(Me.tableest0001.e_grupoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_locacaoNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_locacaoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_locacaoNull()
            Me(Me.tableest0001.e_locacaoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_codsubsNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_codsubsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_codsubsNull()
            Me(Me.tableest0001.e_codsubsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_estminNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_estminColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_estminNull()
            Me(Me.tableest0001.e_estminColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_comerNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_comerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_comerNull()
            Me(Me.tableest0001.e_comerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_qtdeNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_qtdeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_qtdeNull()
            Me(Me.tableest0001.e_qtdeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_pcustoNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_pcustoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_pcustoNull()
            Me(Me.tableest0001.e_pcustoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_pvendaNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_pvendaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_pvendaNull()
            Me(Me.tableest0001.e_pvendaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_com1Null() As Boolean
            Return Me.IsNull(Me.tableest0001.e_com1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_com1Null()
            Me(Me.tableest0001.e_com1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_com2Null() As Boolean
            Return Me.IsNull(Me.tableest0001.e_com2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_com2Null()
            Me(Me.tableest0001.e_com2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_pesoNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_pesoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_pesoNull()
            Me(Me.tableest0001.e_pesoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_promNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_promColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_promNull()
            Me(Me.tableest0001.e_promColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_reduzNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_reduzColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_reduzNull()
            Me(Me.tableest0001.e_reduzColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_vpromNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_vpromColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_vpromNull()
            Me(Me.tableest0001.e_vpromColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_qtdfiscNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_qtdfiscColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_qtdfiscNull()
            Me(Me.tableest0001.e_qtdfiscColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_inventaNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_inventaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_inventaNull()
            Me(Me.tableest0001.e_inventaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_pcustomNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_pcustomColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_pcustomNull()
            Me(Me.tableest0001.e_pcustomColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_pcustoaNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_pcustoaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_pcustoaNull()
            Me(Me.tableest0001.e_pcustoaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_prepoNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_prepoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_prepoNull()
            Me(Me.tableest0001.e_prepoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_pcompNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_pcompColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_pcompNull()
            Me(Me.tableest0001.e_pcompColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_dtcompNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_dtcompColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_dtcompNull()
            Me(Me.tableest0001.e_dtcompColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_dtvendNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_dtvendColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_dtvendNull()
            Me(Me.tableest0001.e_dtvendColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_pvend15Null() As Boolean
            Return Me.IsNull(Me.tableest0001.e_pvend15Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_pvend15Null()
            Me(Me.tableest0001.e_pvend15Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_pvend30Null() As Boolean
            Return Me.IsNull(Me.tableest0001.e_pvend30Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_pvend30Null()
            Me(Me.tableest0001.e_pvend30Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_agreg1Null() As Boolean
            Return Me.IsNull(Me.tableest0001.e_agreg1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_agreg1Null()
            Me(Me.tableest0001.e_agreg1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_agreg2Null() As Boolean
            Return Me.IsNull(Me.tableest0001.e_agreg2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_agreg2Null()
            Me(Me.tableest0001.e_agreg2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_depositoNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_depositoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_depositoNull()
            Me(Me.tableest0001.e_depositoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_empcreNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_empcreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_empcreNull()
            Me(Me.tableest0001.e_empcreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_empdebNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_empdebColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_empdebNull()
            Me(Me.tableest0001.e_empdebColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_promiNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_promiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_promiNull()
            Me(Me.tableest0001.e_promiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_validNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_validColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_validNull()
            Me(Me.tableest0001.e_validColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_statusNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_statusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_statusNull()
            Me(Me.tableest0001.e_statusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_fixoNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_fixoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_fixoNull()
            Me(Me.tableest0001.e_fixoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_ptranNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_ptranColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_ptranNull()
            Me(Me.tableest0001.e_ptranColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_ipiNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_ipiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_ipiNull()
            Me(Me.tableest0001.e_ipiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_letraNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_letraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_letraNull()
            Me(Me.tableest0001.e_letraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_icmsubNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_icmsubColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_icmsubNull()
            Me(Me.tableest0001.e_icmsubColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_pisNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_pisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_pisNull()
            Me(Me.tableest0001.e_pisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_icmsNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_icmsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_icmsNull()
            Me(Me.tableest0001.e_icmsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_filial1Null() As Boolean
            Return Me.IsNull(Me.tableest0001.e_filial1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_filial1Null()
            Me(Me.tableest0001.e_filial1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_filial2Null() As Boolean
            Return Me.IsNull(Me.tableest0001.e_filial2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_filial2Null()
            Me(Me.tableest0001.e_filial2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_bonifNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_bonifColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_bonifNull()
            Me(Me.tableest0001.e_bonifColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_ncmNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_ncmColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_ncmNull()
            Me(Me.tableest0001.e_ncmColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_produt2Null() As Boolean
            Return Me.IsNull(Me.tableest0001.e_produt2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_produt2Null()
            Me(Me.tableest0001.e_produt2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_pcstentNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_pcstentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_pcstentNull()
            Me(Me.tableest0001.e_pcstentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_pcstsaiNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_pcstsaiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_pcstsaiNull()
            Me(Me.tableest0001.e_pcstsaiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_ccstentNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_ccstentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_ccstentNull()
            Me(Me.tableest0001.e_ccstentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_ccstsaiNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_ccstsaiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_ccstsaiNull()
            Me(Me.tableest0001.e_ccstsaiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_pbcalcNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_pbcalcColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_pbcalcNull()
            Me(Me.tableest0001.e_pbcalcColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_cdforteNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_cdforteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_cdforteNull()
            Me(Me.tableest0001.e_cdforteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_fortcofNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_fortcofColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_fortcofNull()
            Me(Me.tableest0001.e_fortcofColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_cdbarraNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_cdbarraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_cdbarraNull()
            Me(Me.tableest0001.e_cdbarraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ise_embalagNull() As Boolean
            Return Me.IsNull(Me.tableest0001.e_embalagColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sete_embalagNull()
            Me(Me.tableest0001.e_embalagColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class est0001RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As est0001Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As est0001Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As est0001Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DataSet1TableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class est0001TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.Odbc.OdbcDataAdapter
        
        Private _connection As Global.System.Data.Odbc.OdbcConnection
        
        Private _transaction As Global.System.Data.Odbc.OdbcTransaction
        
        Private _commandCollection() As Global.System.Data.Odbc.OdbcCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.Odbc.OdbcDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.Odbc.OdbcConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.Odbc.OdbcCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.Odbc.OdbcTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.Odbc.OdbcCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.Odbc.OdbcDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "est0001"
            tableMapping.ColumnMappings.Add("e_codig", "e_codig")
            tableMapping.ColumnMappings.Add("e_produt", "e_produt")
            tableMapping.ColumnMappings.Add("e_cdport", "e_cdport")
            tableMapping.ColumnMappings.Add("e_und", "e_und")
            tableMapping.ColumnMappings.Add("e_clf", "e_clf")
            tableMapping.ColumnMappings.Add("e_cst", "e_cst")
            tableMapping.ColumnMappings.Add("e_cfv", "e_cfv")
            tableMapping.ColumnMappings.Add("e_linha", "e_linha")
            tableMapping.ColumnMappings.Add("e_grupo", "e_grupo")
            tableMapping.ColumnMappings.Add("e_locacao", "e_locacao")
            tableMapping.ColumnMappings.Add("e_codsubs", "e_codsubs")
            tableMapping.ColumnMappings.Add("e_estmin", "e_estmin")
            tableMapping.ColumnMappings.Add("e_comer", "e_comer")
            tableMapping.ColumnMappings.Add("e_qtde", "e_qtde")
            tableMapping.ColumnMappings.Add("e_pcusto", "e_pcusto")
            tableMapping.ColumnMappings.Add("e_pvenda", "e_pvenda")
            tableMapping.ColumnMappings.Add("e_com1", "e_com1")
            tableMapping.ColumnMappings.Add("e_com2", "e_com2")
            tableMapping.ColumnMappings.Add("e_peso", "e_peso")
            tableMapping.ColumnMappings.Add("e_prom", "e_prom")
            tableMapping.ColumnMappings.Add("e_reduz", "e_reduz")
            tableMapping.ColumnMappings.Add("e_vprom", "e_vprom")
            tableMapping.ColumnMappings.Add("e_qtdfisc", "e_qtdfisc")
            tableMapping.ColumnMappings.Add("e_inventa", "e_inventa")
            tableMapping.ColumnMappings.Add("e_pcustom", "e_pcustom")
            tableMapping.ColumnMappings.Add("e_pcustoa", "e_pcustoa")
            tableMapping.ColumnMappings.Add("e_prepo", "e_prepo")
            tableMapping.ColumnMappings.Add("e_pcomp", "e_pcomp")
            tableMapping.ColumnMappings.Add("e_dtcomp", "e_dtcomp")
            tableMapping.ColumnMappings.Add("e_dtvend", "e_dtvend")
            tableMapping.ColumnMappings.Add("e_pvend15", "e_pvend15")
            tableMapping.ColumnMappings.Add("e_pvend30", "e_pvend30")
            tableMapping.ColumnMappings.Add("e_agreg1", "e_agreg1")
            tableMapping.ColumnMappings.Add("e_agreg2", "e_agreg2")
            tableMapping.ColumnMappings.Add("e_deposito", "e_deposito")
            tableMapping.ColumnMappings.Add("e_empcre", "e_empcre")
            tableMapping.ColumnMappings.Add("e_empdeb", "e_empdeb")
            tableMapping.ColumnMappings.Add("e_promi", "e_promi")
            tableMapping.ColumnMappings.Add("e_valid", "e_valid")
            tableMapping.ColumnMappings.Add("e_status", "e_status")
            tableMapping.ColumnMappings.Add("e_fixo", "e_fixo")
            tableMapping.ColumnMappings.Add("e_ptran", "e_ptran")
            tableMapping.ColumnMappings.Add("e_ipi", "e_ipi")
            tableMapping.ColumnMappings.Add("e_letra", "e_letra")
            tableMapping.ColumnMappings.Add("e_icmsub", "e_icmsub")
            tableMapping.ColumnMappings.Add("e_pis", "e_pis")
            tableMapping.ColumnMappings.Add("e_icms", "e_icms")
            tableMapping.ColumnMappings.Add("e_filial1", "e_filial1")
            tableMapping.ColumnMappings.Add("e_filial2", "e_filial2")
            tableMapping.ColumnMappings.Add("e_bonif", "e_bonif")
            tableMapping.ColumnMappings.Add("e_ncm", "e_ncm")
            tableMapping.ColumnMappings.Add("e_produt2", "e_produt2")
            tableMapping.ColumnMappings.Add("e_pcstent", "e_pcstent")
            tableMapping.ColumnMappings.Add("e_pcstsai", "e_pcstsai")
            tableMapping.ColumnMappings.Add("e_ccstent", "e_ccstent")
            tableMapping.ColumnMappings.Add("e_ccstsai", "e_ccstsai")
            tableMapping.ColumnMappings.Add("e_pbcalc", "e_pbcalc")
            tableMapping.ColumnMappings.Add("e_cdforte", "e_cdforte")
            tableMapping.ColumnMappings.Add("e_fortcof", "e_fortcof")
            tableMapping.ColumnMappings.Add("e_cdbarra", "e_cdbarra")
            tableMapping.ColumnMappings.Add("e_embalag", "e_embalag")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.Odbc.OdbcCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""BDGENOV"".""public"".""est0001"" (""e_codig"", ""e_produt"", ""e_cdport"", ""e_u"& _ 
                "nd"", ""e_clf"", ""e_cst"", ""e_cfv"", ""e_linha"", ""e_grupo"", ""e_locacao"", ""e_codsubs"", "& _ 
                """e_estmin"", ""e_comer"", ""e_qtde"", ""e_pcusto"", ""e_pvenda"", ""e_com1"", ""e_com2"", ""e_"& _ 
                "peso"", ""e_prom"", ""e_reduz"", ""e_vprom"", ""e_qtdfisc"", ""e_inventa"", ""e_pcustom"", ""e"& _ 
                "_pcustoa"", ""e_prepo"", ""e_pcomp"", ""e_dtcomp"", ""e_dtvend"", ""e_pvend15"", ""e_pvend30"& _ 
                """, ""e_agreg1"", ""e_agreg2"", ""e_deposito"", ""e_empcre"", ""e_empdeb"", ""e_promi"", ""e_v"& _ 
                "alid"", ""e_status"", ""e_fixo"", ""e_ptran"", ""e_ipi"", ""e_letra"", ""e_icmsub"", ""e_pis"","& _ 
                " ""e_icms"", ""e_filial1"", ""e_filial2"", ""e_bonif"", ""e_ncm"", ""e_produt2"", ""e_pcstent"& _ 
                """, ""e_pcstsai"", ""e_ccstent"", ""e_ccstsai"", ""e_pbcalc"", ""e_cdforte"", ""e_fortcof"", "& _ 
                """e_cdbarra"", ""e_embalag"") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?"& _ 
                ", ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, "& _ 
                "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_codig", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "e_codig", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_produt", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "e_produt", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_cdport", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "e_cdport", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_und", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "e_und", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_clf", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "e_clf", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_cst", Global.System.Data.Odbc.OdbcType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(28,Byte), CType(5,Byte), "e_cst", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_cfv", Global.System.Data.Odbc.OdbcType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(28,Byte), CType(5,Byte), "e_cfv", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_linha", Global.System.Data.Odbc.OdbcType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(28,Byte), CType(5,Byte), "e_linha", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_grupo", Global.System.Data.Odbc.OdbcType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(28,Byte), CType(5,Byte), "e_grupo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_locacao", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "e_locacao", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_codsubs", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "e_codsubs", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_estmin", Global.System.Data.Odbc.OdbcType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(28,Byte), CType(5,Byte), "e_estmin", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_comer", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "e_comer", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_qtde", Global.System.Data.Odbc.OdbcType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(28,Byte), CType(5,Byte), "e_qtde", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_pcusto", Global.System.Data.Odbc.OdbcType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(28,Byte), CType(6,Byte), "e_pcusto", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_pvenda", Global.System.Data.Odbc.OdbcType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(28,Byte), CType(5,Byte), "e_pvenda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_com1", Global.System.Data.Odbc.OdbcType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(28,Byte), CType(5,Byte), "e_com1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_com2", Global.System.Data.Odbc.OdbcType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(28,Byte), CType(5,Byte), "e_com2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_peso", Global.System.Data.Odbc.OdbcType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(28,Byte), CType(6,Byte), "e_peso", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_prom", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "e_prom", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_reduz", Global.System.Data.Odbc.OdbcType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(28,Byte), CType(5,Byte), "e_reduz", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_vprom", Global.System.Data.Odbc.OdbcType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(28,Byte), CType(5,Byte), "e_vprom", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_qtdfisc", Global.System.Data.Odbc.OdbcType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(28,Byte), CType(7,Byte), "e_qtdfisc", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_inventa", Global.System.Data.Odbc.OdbcType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(28,Byte), CType(5,Byte), "e_inventa", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_pcustom", Global.System.Data.Odbc.OdbcType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(28,Byte), CType(6,Byte), "e_pcustom", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_pcustoa", Global.System.Data.Odbc.OdbcType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(28,Byte), CType(5,Byte), "e_pcustoa", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_prepo", Global.System.Data.Odbc.OdbcType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(28,Byte), CType(5,Byte), "e_prepo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_pcomp", Global.System.Data.Odbc.OdbcType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(28,Byte), CType(6,Byte), "e_pcomp", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_dtcomp", Global.System.Data.Odbc.OdbcType.DateTime, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "e_dtcomp", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_dtvend", Global.System.Data.Odbc.OdbcType.DateTime, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "e_dtvend", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_pvend15", Global.System.Data.Odbc.OdbcType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(28,Byte), CType(5,Byte), "e_pvend15", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_pvend30", Global.System.Data.Odbc.OdbcType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(28,Byte), CType(5,Byte), "e_pvend30", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_agreg1", Global.System.Data.Odbc.OdbcType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(28,Byte), CType(5,Byte), "e_agreg1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_agreg2", Global.System.Data.Odbc.OdbcType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(28,Byte), CType(5,Byte), "e_agreg2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_deposito", Global.System.Data.Odbc.OdbcType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(28,Byte), CType(5,Byte), "e_deposito", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_empcre", Global.System.Data.Odbc.OdbcType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(28,Byte), CType(5,Byte), "e_empcre", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_empdeb", Global.System.Data.Odbc.OdbcType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(28,Byte), CType(5,Byte), "e_empdeb", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_promi", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "e_promi", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_valid", Global.System.Data.Odbc.OdbcType.DateTime, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "e_valid", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_status", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "e_status", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_fixo", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "e_fixo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_ptran", Global.System.Data.Odbc.OdbcType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(28,Byte), CType(5,Byte), "e_ptran", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_ipi", Global.System.Data.Odbc.OdbcType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(28,Byte), CType(5,Byte), "e_ipi", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_letra", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "e_letra", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_icmsub", Global.System.Data.Odbc.OdbcType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(28,Byte), CType(5,Byte), "e_icmsub", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_pis", Global.System.Data.Odbc.OdbcType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(28,Byte), CType(5,Byte), "e_pis", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_icms", Global.System.Data.Odbc.OdbcType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(28,Byte), CType(5,Byte), "e_icms", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_filial1", Global.System.Data.Odbc.OdbcType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(28,Byte), CType(5,Byte), "e_filial1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_filial2", Global.System.Data.Odbc.OdbcType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(28,Byte), CType(5,Byte), "e_filial2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_bonif", Global.System.Data.Odbc.OdbcType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(28,Byte), CType(5,Byte), "e_bonif", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_ncm", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "e_ncm", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_produt2", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "e_produt2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_pcstent", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "e_pcstent", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_pcstsai", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "e_pcstsai", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_ccstent", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "e_ccstent", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_ccstsai", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "e_ccstsai", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_pbcalc", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "e_pbcalc", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_cdforte", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "e_cdforte", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_fortcof", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "e_fortcof", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_cdbarra", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "e_cdbarra", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("e_embalag", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "e_embalag", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.Odbc.OdbcConnection
            Me._connection.ConnectionString = Global.MetroSys.My.MySettings.Default.ConnectionStringPostgres
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.Odbc.OdbcCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.Odbc.OdbcCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ""e_codig"", ""e_produt"", ""e_cdport"", ""e_und"", ""e_clf"", ""e_cst"", ""e_cfv"", ""e_"& _ 
                "linha"", ""e_grupo"", ""e_locacao"", ""e_codsubs"", ""e_estmin"", ""e_comer"", ""e_qtde"", ""e"& _ 
                "_pcusto"", ""e_pvenda"", ""e_com1"", ""e_com2"", ""e_peso"", ""e_prom"", ""e_reduz"", ""e_vpro"& _ 
                "m"", ""e_qtdfisc"", ""e_inventa"", ""e_pcustom"", ""e_pcustoa"", ""e_prepo"", ""e_pcomp"", ""e"& _ 
                "_dtcomp"", ""e_dtvend"", ""e_pvend15"", ""e_pvend30"", ""e_agreg1"", ""e_agreg2"", ""e_depos"& _ 
                "ito"", ""e_empcre"", ""e_empdeb"", ""e_promi"", ""e_valid"", ""e_status"", ""e_fixo"", ""e_ptr"& _ 
                "an"", ""e_ipi"", ""e_letra"", ""e_icmsub"", ""e_pis"", ""e_icms"", ""e_filial1"", ""e_filial2"""& _ 
                ", ""e_bonif"", ""e_ncm"", ""e_produt2"", ""e_pcstent"", ""e_pcstsai"", ""e_ccstent"", ""e_ccs"& _ 
                "tsai"", ""e_pbcalc"", ""e_cdforte"", ""e_fortcof"", ""e_cdbarra"", ""e_embalag"" FROM ""publ"& _ 
                "ic"".""est0001"""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.est0001DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet1.est0001DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet1.est0001DataTable = New DataSet1.est0001DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet1.est0001DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "est0001")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal e_codig As String,  _
                    ByVal e_produt As String,  _
                    ByVal e_cdport As String,  _
                    ByVal e_und As String,  _
                    ByVal e_clf As String,  _
                    ByVal e_cst As Decimal,  _
                    ByVal e_cfv As Decimal,  _
                    ByVal e_linha As Decimal,  _
                    ByVal e_grupo As Decimal,  _
                    ByVal e_locacao As String,  _
                    ByVal e_codsubs As String,  _
                    ByVal e_estmin As Decimal,  _
                    ByVal e_comer As String,  _
                    ByVal e_qtde As Decimal,  _
                    ByVal e_pcusto As Decimal,  _
                    ByVal e_pvenda As Decimal,  _
                    ByVal e_com1 As Decimal,  _
                    ByVal e_com2 As Decimal,  _
                    ByVal e_peso As Decimal,  _
                    ByVal e_prom As String,  _
                    ByVal e_reduz As Decimal,  _
                    ByVal e_vprom As Decimal,  _
                    ByVal e_qtdfisc As Decimal,  _
                    ByVal e_inventa As Decimal,  _
                    ByVal e_pcustom As Decimal,  _
                    ByVal e_pcustoa As Decimal,  _
                    ByVal e_prepo As Decimal,  _
                    ByVal e_pcomp As Decimal,  _
                    ByVal e_dtcomp As Date,  _
                    ByVal e_dtvend As Date,  _
                    ByVal e_pvend15 As Decimal,  _
                    ByVal e_pvend30 As Decimal,  _
                    ByVal e_agreg1 As Decimal,  _
                    ByVal e_agreg2 As Decimal,  _
                    ByVal e_deposito As Decimal,  _
                    ByVal e_empcre As Decimal,  _
                    ByVal e_empdeb As Decimal,  _
                    ByVal e_promi As String,  _
                    ByVal e_valid As Date,  _
                    ByVal e_status As String,  _
                    ByVal e_fixo As String,  _
                    ByVal e_ptran As Decimal,  _
                    ByVal e_ipi As Decimal,  _
                    ByVal e_letra As String,  _
                    ByVal e_icmsub As Decimal,  _
                    ByVal e_pis As Decimal,  _
                    ByVal e_icms As Decimal,  _
                    ByVal e_filial1 As Decimal,  _
                    ByVal e_filial2 As Decimal,  _
                    ByVal e_bonif As Decimal,  _
                    ByVal e_ncm As String,  _
                    ByVal e_produt2 As String,  _
                    ByVal e_pcstent As String,  _
                    ByVal e_pcstsai As String,  _
                    ByVal e_ccstent As String,  _
                    ByVal e_ccstsai As String,  _
                    ByVal e_pbcalc As String,  _
                    ByVal e_cdforte As String,  _
                    ByVal e_fortcof As String,  _
                    ByVal e_cdbarra As String,  _
                    ByVal e_embalag As String) As Integer
            If (e_codig Is Nothing) Then
                Throw New Global.System.ArgumentNullException("e_codig")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(e_codig,String)
            End If
            If (e_produt Is Nothing) Then
                Throw New Global.System.ArgumentNullException("e_produt")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(e_produt,String)
            End If
            If (e_cdport Is Nothing) Then
                Throw New Global.System.ArgumentNullException("e_cdport")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(e_cdport,String)
            End If
            If (e_und Is Nothing) Then
                Throw New Global.System.ArgumentNullException("e_und")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(e_und,String)
            End If
            If (e_clf Is Nothing) Then
                Throw New Global.System.ArgumentNullException("e_clf")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(e_clf,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(e_cst,Decimal)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(e_cfv,Decimal)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(e_linha,Decimal)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(e_grupo,Decimal)
            If (e_locacao Is Nothing) Then
                Throw New Global.System.ArgumentNullException("e_locacao")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(e_locacao,String)
            End If
            If (e_codsubs Is Nothing) Then
                Throw New Global.System.ArgumentNullException("e_codsubs")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(e_codsubs,String)
            End If
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(e_estmin,Decimal)
            If (e_comer Is Nothing) Then
                Throw New Global.System.ArgumentNullException("e_comer")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(e_comer,String)
            End If
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(e_qtde,Decimal)
            Me.Adapter.InsertCommand.Parameters(14).Value = CType(e_pcusto,Decimal)
            Me.Adapter.InsertCommand.Parameters(15).Value = CType(e_pvenda,Decimal)
            Me.Adapter.InsertCommand.Parameters(16).Value = CType(e_com1,Decimal)
            Me.Adapter.InsertCommand.Parameters(17).Value = CType(e_com2,Decimal)
            Me.Adapter.InsertCommand.Parameters(18).Value = CType(e_peso,Decimal)
            If (e_prom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("e_prom")
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(e_prom,String)
            End If
            Me.Adapter.InsertCommand.Parameters(20).Value = CType(e_reduz,Decimal)
            Me.Adapter.InsertCommand.Parameters(21).Value = CType(e_vprom,Decimal)
            Me.Adapter.InsertCommand.Parameters(22).Value = CType(e_qtdfisc,Decimal)
            Me.Adapter.InsertCommand.Parameters(23).Value = CType(e_inventa,Decimal)
            Me.Adapter.InsertCommand.Parameters(24).Value = CType(e_pcustom,Decimal)
            Me.Adapter.InsertCommand.Parameters(25).Value = CType(e_pcustoa,Decimal)
            Me.Adapter.InsertCommand.Parameters(26).Value = CType(e_prepo,Decimal)
            Me.Adapter.InsertCommand.Parameters(27).Value = CType(e_pcomp,Decimal)
            Me.Adapter.InsertCommand.Parameters(28).Value = CType(e_dtcomp,Date)
            Me.Adapter.InsertCommand.Parameters(29).Value = CType(e_dtvend,Date)
            Me.Adapter.InsertCommand.Parameters(30).Value = CType(e_pvend15,Decimal)
            Me.Adapter.InsertCommand.Parameters(31).Value = CType(e_pvend30,Decimal)
            Me.Adapter.InsertCommand.Parameters(32).Value = CType(e_agreg1,Decimal)
            Me.Adapter.InsertCommand.Parameters(33).Value = CType(e_agreg2,Decimal)
            Me.Adapter.InsertCommand.Parameters(34).Value = CType(e_deposito,Decimal)
            Me.Adapter.InsertCommand.Parameters(35).Value = CType(e_empcre,Decimal)
            Me.Adapter.InsertCommand.Parameters(36).Value = CType(e_empdeb,Decimal)
            If (e_promi Is Nothing) Then
                Throw New Global.System.ArgumentNullException("e_promi")
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(e_promi,String)
            End If
            Me.Adapter.InsertCommand.Parameters(38).Value = CType(e_valid,Date)
            If (e_status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("e_status")
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(e_status,String)
            End If
            If (e_fixo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("e_fixo")
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(e_fixo,String)
            End If
            Me.Adapter.InsertCommand.Parameters(41).Value = CType(e_ptran,Decimal)
            Me.Adapter.InsertCommand.Parameters(42).Value = CType(e_ipi,Decimal)
            If (e_letra Is Nothing) Then
                Throw New Global.System.ArgumentNullException("e_letra")
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(e_letra,String)
            End If
            Me.Adapter.InsertCommand.Parameters(44).Value = CType(e_icmsub,Decimal)
            Me.Adapter.InsertCommand.Parameters(45).Value = CType(e_pis,Decimal)
            Me.Adapter.InsertCommand.Parameters(46).Value = CType(e_icms,Decimal)
            Me.Adapter.InsertCommand.Parameters(47).Value = CType(e_filial1,Decimal)
            Me.Adapter.InsertCommand.Parameters(48).Value = CType(e_filial2,Decimal)
            Me.Adapter.InsertCommand.Parameters(49).Value = CType(e_bonif,Decimal)
            If (e_ncm Is Nothing) Then
                Throw New Global.System.ArgumentNullException("e_ncm")
            Else
                Me.Adapter.InsertCommand.Parameters(50).Value = CType(e_ncm,String)
            End If
            If (e_produt2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("e_produt2")
            Else
                Me.Adapter.InsertCommand.Parameters(51).Value = CType(e_produt2,String)
            End If
            If (e_pcstent Is Nothing) Then
                Throw New Global.System.ArgumentNullException("e_pcstent")
            Else
                Me.Adapter.InsertCommand.Parameters(52).Value = CType(e_pcstent,String)
            End If
            If (e_pcstsai Is Nothing) Then
                Throw New Global.System.ArgumentNullException("e_pcstsai")
            Else
                Me.Adapter.InsertCommand.Parameters(53).Value = CType(e_pcstsai,String)
            End If
            If (e_ccstent Is Nothing) Then
                Throw New Global.System.ArgumentNullException("e_ccstent")
            Else
                Me.Adapter.InsertCommand.Parameters(54).Value = CType(e_ccstent,String)
            End If
            If (e_ccstsai Is Nothing) Then
                Throw New Global.System.ArgumentNullException("e_ccstsai")
            Else
                Me.Adapter.InsertCommand.Parameters(55).Value = CType(e_ccstsai,String)
            End If
            If (e_pbcalc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("e_pbcalc")
            Else
                Me.Adapter.InsertCommand.Parameters(56).Value = CType(e_pbcalc,String)
            End If
            If (e_cdforte Is Nothing) Then
                Throw New Global.System.ArgumentNullException("e_cdforte")
            Else
                Me.Adapter.InsertCommand.Parameters(57).Value = CType(e_cdforte,String)
            End If
            If (e_fortcof Is Nothing) Then
                Throw New Global.System.ArgumentNullException("e_fortcof")
            Else
                Me.Adapter.InsertCommand.Parameters(58).Value = CType(e_fortcof,String)
            End If
            If (e_cdbarra Is Nothing) Then
                Throw New Global.System.ArgumentNullException("e_cdbarra")
            Else
                Me.Adapter.InsertCommand.Parameters(59).Value = CType(e_cdbarra,String)
            End If
            If (e_embalag Is Nothing) Then
                Throw New Global.System.ArgumentNullException("e_embalag")
            Else
                Me.Adapter.InsertCommand.Parameters(60).Value = CType(e_embalag,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _est0001TableAdapter As est0001TableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property est0001TableAdapter() As est0001TableAdapter
            Get
                Return Me._est0001TableAdapter
            End Get
            Set
                Me._est0001TableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._est0001TableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._est0001TableAdapter.Connection) Is Nothing)) Then
                    Return Me._est0001TableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._est0001TableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As DataSet1, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._est0001TableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.est0001.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._est0001TableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As DataSet1, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._est0001TableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.est0001.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._est0001TableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As DataSet1, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._est0001TableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.est0001.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._est0001TableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As DataSet1) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._est0001TableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._est0001TableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._est0001TableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._est0001TableAdapter, Me._est0001TableAdapter.Connection)
                    Me._est0001TableAdapter.Connection = CType(workConnection,Global.System.Data.Odbc.OdbcConnection)
                    Me._est0001TableAdapter.Transaction = CType(workTransaction,Global.System.Data.Odbc.OdbcTransaction)
                    If Me._est0001TableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._est0001TableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._est0001TableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._est0001TableAdapter) Is Nothing) Then
                    Me._est0001TableAdapter.Connection = CType(revertConnections(Me._est0001TableAdapter),Global.System.Data.Odbc.OdbcConnection)
                    Me._est0001TableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
